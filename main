from django.shortcuts import render,redirect
from .models import*
from django.contrib import messages
from django.contrib.sessions.models import Session
from django.db import connection
import cv2
import tensorflow as tf
import numpy as np
from tensorflow.keras.models import load_model
from mtcnn import MTCNN
import os
import shutil
from django.conf import settings
from django.core.files.storage import FileSystemStorage
import face_recognition
from PIL import Image
# Create your views here.
def Home(request):
print("Media Root :",settings.MEDIA_ROOT,)
return render(request,"Home.html",{})
def Admin_Login(request):
if request.method == "POST":
A_username = request.POST['aname']
A_password = request.POST['apass']
if AdminDetails.objects.filter(username = A_username,password = 
A_password).exists():
ad = AdminDetails.objects.get(username=A_username, 
password=A_password)
print('d')
messages.info(request,'Admin login is Sucessfull')
request.session['type_id'] = 'Admin'
request.session['UserType'] = 'Admin'
request.session['login'] = "Yes"
return redirect("/")
else:
print('y')
messages.error(request, 'Error wrong username/password')
return render(request, "Admin_Login.html", {})
else:
return render(request, "Admin_Login.html", {})
def User_Login(request):
if request.method == "POST":
C_name = request.POST['aname']
C_password = request.POST['apass']
if 
userDetails.objects.filter(Username=C_name,Password=C_password).exists():
users = 
userDetails.objects.all().filter(Username=C_name,Password=C_password)
messages.info(request,C_name +' logged in')
request.session['UserId'] = users[0].id
request.session['type_id'] = 'User'
request.session['UserType'] = C_name
request.session['login'] = "Yes"
return redirect('/')
else:
messages.info(request, 'Please Register')
return redirect("/User_Registration")
else:
return render(request,'User_Login.html',{})
def User_Registration(request):
if request.method == "POST":
Name= request.POST['name']
Age= request.POST['age']
Phone= request.POST['phone']
Email= request.POST['email']
Address= request.POST['address']
Username= request.POST['username']
Password= request.POST['password']
if userDetails.objects.all().filter(Username=Username).exists():
messages.info(request,"Username Taken")
return redirect('/User_Registration')
else:
obj = userDetails(
Name=Name
,Age=Age
,Phone=Phone
,Email=Email
,Address=Address
,Username=Username
,Password=Password)
obj.save()
messages.info(request,Name+" Registered")
return redirect('/User_Login')
else:
return render(request,"User_Registration.html",{})
def Manage_Products(request):
details = Products.objects.all()
return render(request,"Manage_Products.html",{'details':details})
def View_Users(request):
details = userDetails.objects.all()
return render(request,"View_Users.html",{'details':details})
# Load the trained model
model = 
load_model('C:/workspace/Skin_Tone_And_Occasion_Oriented_Outfit/Skin_App/m
odel.h5')
# List of class names
classes = ['Fair_Light', 'Medium_Tan', 'Dark_Deep']
# Mapping dictionary for descriptive skin tone labels
descriptive_labels = {
 'Fair_Light': 'Fair / Light',
 'Medium_Tan': 'Medium / Tan',
 'Dark_Deep': 'Dark / Deep'
}
# Load the MTCNN face detection model
mtcnn = MTCNN()
def predict_skin_tone(image_path):
 # Read the image
 image = cv2.imread(image_path)
 
 # Detect faces
 faces = mtcnn.detect_faces(image)
 if len(faces) > 0:
 largest_face = max(faces, key=lambda f: f['box'][2] * f['box'][3])
 x, y, w, h = largest_face['box']
 detected_face = image[y:y+h, x:x+w]
 
 # Resize the detected face to the desired input shape
 detected_face = cv2.resize(detected_face, (120, 90))
# Preprocess the detected face for classification
 detected_face = 
tf.keras.applications.mobilenet_v2.preprocess_input(detected_face[np.newaxis, ...])
 
 # Predict the class of the face
 predictions = model.predict(detected_face)
 predicted_class_idx = np.argmax(predictions)
 predicted_class = classes[predicted_class_idx]
 
 # Get the descriptive label from the mapping dictionary
 descriptive_label = descriptive_labels[predicted_class]
 
 return descriptive_label
 else:
 return 'No face detected in the uploaded image.'
def Add_Products(request):
if request.method == "POST":
occasion = request.POST['occasion']
product_name = request.POST['product_name']
product_price = request.POST['price']
image1 = request.FILES['image1']
image2 = request.FILES['image2']
size = request.POST['size']
print('occasion :',occasion)
print('product_name :',product_name)
print('product_price :',product_price)
print('image1 :',image1)
print('image2 :',image2)
temp_dir = os.path.join(settings.MEDIA_ROOT, 'temp')
os.makedirs(temp_dir, exist_ok=True)
fs = FileSystemStorage(location=temp_dir)
filename = fs.save(image1.name, image1)
uploaded_file_path = os.path.join(temp_dir, filename)
skin_tone = predict_skin_tone(uploaded_file_path)
print("Skin_Tone :",skin_tone)
shutil.rmtree(temp_dir)
obj = 
Products(occasion=occasion,product_name=product_name,product_price=product_pr
ice,image1=image1,image2=image2,product_size=size,skin_tone=skin_tone)
obj.save()
messages.info(request,"Product Added")
return redirect('/Manage_Products/')
else:
return render(request,"Add_Products.html",{})
def View_Product(request,id):
details = Products.objects.filter(id=id)
return render(request,"View_Product.html",{'details':details})
def Update_Product(request,id):
if request.method == "POST":
data = Products.objects.get(id=id)
occasion = request.POST.get('occasion',data.occasion).strip()
product_name = 
request.POST.get('product_name',data.product_name).strip()
product_price = request.POST.get('price',data.product_price).strip()
image1 = request.FILES.get('image1',data.image1)
image2 = request.FILES.get('image2',data.image2)
print('occasion :',occasion)
print('product_name :',product_name)
print('product_price :',product_price)
print('image1 :',image1)
print('image2 :',image2)
data.occasion = occasion
data.product_name = product_name
data.product_price = product_price
data.image1 = image1
data.image2 = image2
data.save()
messages.info(request,"Product Data Updated")
return redirect('/Update_Product/'+str(id))
else:
details = Products.objects.filter(id=id)
return render(request,"Update_Product.html",{'details':details})
def Feedback(request):
if request.method == "POST":
feedback = request.POST['feedback']
user = request.session['UserId']
userid = userDetails.objects.get(id=user)
obj = User_Feedback(user=userid,feedback=user)
obj.save()
messages.info(request,"Feedback Submitted ")
return redirect('/Feedback/')
else:
user = request.session['UserId']
userid = userDetails.objects.get(id=user)
details = User_Feedback.objects.filter(user=userid,response = 
"Pending")
data = User_Feedback.objects.filter(user = user)
return render(request,"Feedback.html",{'details':details,'data':data})
def View_Feedback(request):
details = User_Feedback.objects.all()
data = User_Feedback.objects.filter(response = "Pending")
return render(request,"View_Feedback.html",{'details':details,'data':data})
def Response(request,id):
print("Feedback id :",id)
if request.method == "POST":
response = request.POST.get('response').strip()
User_Feedback.objects.filter(id=id).update(response=response)
messages.info(request,"Replied")
return redirect('/View_Feedback/')
def save_face_images(input_image_path, output_folder, product_name):
 # Load the input image
 image = face_recognition.load_image_file(input_image_path)
 
 # Find all face locations in the image
 face_locations = face_recognition.face_locations(image)
 
 # Create the output folder if it doesn't exist
 os.makedirs(output_folder, exist_ok=True)
 
 # Loop through each face found in the image
 for i, face_location in enumerate(face_locations):
 # Extract the coordinates of the face
 top, right, bottom, left = face_location
 
 # Crop the face from the image
face_image = image[top:bottom, left:right]
 
 # Convert NumPy array to PIL Image
 pil_image = Image.fromarray(face_image)
 
 # Generate unique filename for the cropped face image
 output_file_name = f"{product_name}.jpg"
 output_file_path = os.path.join(output_folder, output_file_name)
 
 # Save the face image as a .jpg file
 pil_image.save(output_file_path)
def View_Recommendation(request):
 if request.method == "POST":
 occasion = request.POST['occasion']
 size = request.POST['size']
 image1 = request.FILES['file']
 print("occasion :",occasion)
 print("size :",size)
 print("image1 :",image1)
 
 # Temporary directory to save the uploaded image
 temp_dir = os.path.join(settings.MEDIA_ROOT, 'temp')
 os.makedirs(temp_dir, exist_ok=True)
 fs = FileSystemStorage(location=temp_dir)
 filename = fs.save(image1.name, image1)
 uploaded_file_path = os.path.join(temp_dir, filename)
 
 # Predict skin tone from the uploaded image
 skin_tone = predict_skin_tone(uploaded_file_path)
 print("Skin_Tone :",skin_tone)
 
 # Remove temporary directory
 shutil.rmtree(temp_dir)
userid = request.session['UserId']
 user = userDetails.objects.get(id=userid)
 obj = 
User_Uploaded_Data(user=user,image1=image1,occasion=occasion,product_size=siz
e,skin_tone=skin_tone)
 obj.save()
 
 # Filter products based on occasion, size, and skin tone
 details = Products.objects.filter(occasion=occasion, product_size=size, 
skin_tone=skin_tone)
 
 # if details:
 # for product in details:
 # print("Product Name:", product.product_name)
 # print("Product Size:", product.product_size)
 
 # # Construct input image path for face cropping
 # input_image_path = os.path.join(settings.MEDIA_ROOT, 
str(product.image1))
 
 # # Construct output folder path for saving cropped face images
 # output_folder = os.path.join(settings.MEDIA_ROOT, 'croped_images')
 
 # # Call the function to crop faces from the image associated with the product
 # save_face_images(input_image_path, output_folder, 
product.product_name)
 if details:
 userid = request.session['UserId']
 user = userDetails.objects.get(id=userid)
 for i in details:
P_id = i.id
 product_id = Products.objects.get(id=P_id)
 Recommendation.objects.create(user=user,product_id=product_id)
 
 return render(request, "Recommendation_Result.html", {'details':details})
 else:
 return render(request, "View_Recommendation.html", {})
def Recommendation_Result(request):
return render(request,"Recommendation_Result.html",{})
def View_History(request):
user = request.session['UserId']
details = User_Uploaded_Data.objects.filter(user=user)
data = Recommendation.objects.filter(user=user)
return render(request,"View_History.html",{'details':details,'data':data})
def reply(request,id):
print("Product id :",id)
if request.method == "POST":
reply = request.POST['reply']
Recommendation.objects.filter(id=id).update(feedback=reply)
messages.info(request,"Feedback Submitted")
return redirect('/View_History/')
def View_User_Uploaded_Data(request,id):
data = User_Uploaded_Data.objects.filter(user=id)
return render(request,"View_User_Uploaded_Data.html",{'data':data})
def View_User_Recommendation(request,id):
data = Recommendation.objects.filter(user=id)
return render(request,"View_User_Recommendation.html",{'data':data})
def Delete_Product(request,id):
Products.objects.filter(id=id).delete()
return redirect('Manage_Products/')
def Logout(request):
Session.objects.all().delete()
return redirect("/")
